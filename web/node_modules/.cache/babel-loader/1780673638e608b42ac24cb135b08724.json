{"ast":null,"code":"var _jsxFileName = \"/Users/manifest/Desktop/Github Projects/MERN_MEMORYAPP/web/src/components/PostForm.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport gql from \"graphql-tag\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { useForm } from \"../utils/hooks\";\nimport { FETCH_POSTS_QUERY } from \"../utils/graphql\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PostForm = () => {\n  _s();\n\n  const {\n    values,\n    onChange,\n    onSubmit\n  } = useForm(createPostCallback, {\n    body: \"\"\n  });\n  const [createPost, {\n    error\n  }] = useMutation(CREATE_POST_MUTATION, {\n    variables: values,\n    update: (proxy, result) => {\n      const data = proxy.readQuery({\n        query: FETCH_POSTS_QUERY\n      });\n      proxy.writeQuery({\n        query: FETCH_POSTS_QUERY,\n        data: {\n          getPosts: [result.data.createPost, ...data.getPosts]\n        }\n      });\n      values.body = \"\";\n    }\n  });\n\n  function createPostCallback() {\n    createPost();\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create a post:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n          placeholder: \"Write a comment...\",\n          name: \"body\",\n          onChange: onChange,\n          value: values.body,\n          error: error ? true : false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          color: \"teal\",\n          disabled: values.body.trim() === \"\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 4\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ui error message\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list\",\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: error.graphQLErrors[0].message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(PostForm, \"upPCav/qNTfBrUEFe7bmdjw70wA=\", false, function () {\n  return [useForm, useMutation];\n});\n\n_c = PostForm;\nconst CREATE_POST_MUTATION = gql`\n\tmutation createPost($body: String!) {\n\t\tcreatePost(body: $body) {\n\t\t\tid\n\t\t\tbody\n\t\t\tcreatedAt\n\t\t\tusername\n\t\t\tlikes {\n\t\t\t\tid\n\t\t\t\tusername\n\t\t\t\tcreatedAt\n\t\t\t}\n\t\t\tlikeCount\n\t\t\tcomments {\n\t\t\t\tid\n\t\t\t\tbody\n\t\t\t\tusername\n\t\t\t\tcreatedAt\n\t\t\t}\n\t\t\tcommentCount\n\t\t}\n\t}\n`;\nexport default PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["/Users/manifest/Desktop/Github Projects/MERN_MEMORYAPP/web/src/components/PostForm.js"],"names":["React","Button","Form","gql","useMutation","useForm","FETCH_POSTS_QUERY","PostForm","values","onChange","onSubmit","createPostCallback","body","createPost","error","CREATE_POST_MUTATION","variables","update","proxy","result","data","readQuery","query","writeQuery","getPosts","trim","graphQLErrors","message"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,mBAA7B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AAEA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,iBAAT,QAAkC,kBAAlC;;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACtB,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA;AAApB,MAAiCL,OAAO,CAACM,kBAAD,EAAqB;AAClEC,IAAAA,IAAI,EAAE;AAD4D,GAArB,CAA9C;AAIA,QAAM,CAACC,UAAD,EAAa;AAAEC,IAAAA;AAAF,GAAb,IAA0BV,WAAW,CAACW,oBAAD,EAAuB;AACjEC,IAAAA,SAAS,EAAER,MADsD;AAEjES,IAAAA,MAAM,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1B,YAAMC,IAAI,GAAGF,KAAK,CAACG,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEhB;AAAT,OAAhB,CAAb;AAEAY,MAAAA,KAAK,CAACK,UAAN,CAAiB;AAChBD,QAAAA,KAAK,EAAEhB,iBADS;AAEhBc,QAAAA,IAAI,EAAE;AACLI,UAAAA,QAAQ,EAAE,CAACL,MAAM,CAACC,IAAP,CAAYP,UAAb,EAAyB,GAAGO,IAAI,CAACI,QAAjC;AADL;AAFU,OAAjB;AAOAhB,MAAAA,MAAM,CAACI,IAAP,GAAc,EAAd;AACA;AAbgE,GAAvB,CAA3C;;AAgBA,WAASD,kBAAT,GAA8B;AAC7BE,IAAAA,UAAU;AACV;;AAED,sBACC;AAAA,4BACC,QAAC,IAAD;AAAM,MAAA,QAAQ,EAAEH,QAAhB;AAAA,8BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAEC,QAAC,IAAD,CAAM,KAAN;AAAA,gCACC,QAAC,IAAD,CAAM,KAAN;AACC,UAAA,WAAW,EAAC,oBADb;AAEC,UAAA,IAAI,EAAC,MAFN;AAGC,UAAA,QAAQ,EAAED,QAHX;AAIC,UAAA,KAAK,EAAED,MAAM,CAACI,IAJf;AAKC,UAAA,KAAK,EAAEE,KAAK,GAAG,IAAH,GAAU;AALvB;AAAA;AAAA;AAAA;AAAA,gBADD,eAQC,QAAC,MAAD;AACC,UAAA,IAAI,EAAC,QADN;AAEC,UAAA,KAAK,EAAC,MAFP;AAGC,UAAA,QAAQ,EAAEN,MAAM,CAACI,IAAP,CAAYa,IAAZ,OAAuB,EAHlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARD;AAAA;AAAA;AAAA;AAAA;AAAA,cAFD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,EAoBEX,KAAK,iBACL;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,6BACC;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA,+BACC;AAAA,oBAAKA,KAAK,CAACY,aAAN,CAAoB,CAApB,EAAuBC;AAA5B;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YArBF;AAAA,kBADD;AA8BA,CAvDD;;GAAMpB,Q;UACkCF,O,EAIPD,W;;;KAL3BG,Q;AAyDN,MAAMQ,oBAAoB,GAAGZ,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAtBA;AAwBA,eAAeI,QAAf","sourcesContent":["import React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport gql from \"graphql-tag\";\nimport { useMutation } from \"@apollo/react-hooks\";\n\nimport { useForm } from \"../utils/hooks\";\nimport { FETCH_POSTS_QUERY } from \"../utils/graphql\";\n\nconst PostForm = () => {\n\tconst { values, onChange, onSubmit } = useForm(createPostCallback, {\n\t\tbody: \"\",\n\t});\n\n\tconst [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n\t\tvariables: values,\n\t\tupdate: (proxy, result) => {\n\t\t\tconst data = proxy.readQuery({ query: FETCH_POSTS_QUERY });\n\n\t\t\tproxy.writeQuery({\n\t\t\t\tquery: FETCH_POSTS_QUERY,\n\t\t\t\tdata: {\n\t\t\t\t\tgetPosts: [result.data.createPost, ...data.getPosts],\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tvalues.body = \"\";\n\t\t},\n\t});\n\n\tfunction createPostCallback() {\n\t\tcreatePost();\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Form onSubmit={onSubmit}>\n\t\t\t\t<h2>Create a post:</h2>\n\t\t\t\t<Form.Field>\n\t\t\t\t\t<Form.Input\n\t\t\t\t\t\tplaceholder='Write a comment...'\n\t\t\t\t\t\tname='body'\n\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t\tvalue={values.body}\n\t\t\t\t\t\terror={error ? true : false}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttype='submit'\n\t\t\t\t\t\tcolor='teal'\n\t\t\t\t\t\tdisabled={values.body.trim() === \"\"}\n\t\t\t\t\t>\n\t\t\t\t\t\tSubmit\n\t\t\t\t\t</Button>\n\t\t\t\t</Form.Field>\n\t\t\t</Form>\n\t\t\t{error && (\n\t\t\t\t<div className='ui error message'>\n\t\t\t\t\t<ul className='list'>\n\t\t\t\t\t\t<li>{error.graphQLErrors[0].message}</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nconst CREATE_POST_MUTATION = gql`\n\tmutation createPost($body: String!) {\n\t\tcreatePost(body: $body) {\n\t\t\tid\n\t\t\tbody\n\t\t\tcreatedAt\n\t\t\tusername\n\t\t\tlikes {\n\t\t\t\tid\n\t\t\t\tusername\n\t\t\t\tcreatedAt\n\t\t\t}\n\t\t\tlikeCount\n\t\t\tcomments {\n\t\t\t\tid\n\t\t\t\tbody\n\t\t\t\tusername\n\t\t\t\tcreatedAt\n\t\t\t}\n\t\t\tcommentCount\n\t\t}\n\t}\n`;\n\nexport default PostForm;\n"]},"metadata":{},"sourceType":"module"}